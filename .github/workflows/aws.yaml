
name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]


jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR using Buildx
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          ECR_REGISTRY_CLEAN=$(echo -n "$ECR_REGISTRY" | tr -d '\n')
          ECR_REPOSITORY_CLEAN=$(echo -n "$ECR_REPOSITORY" | tr -d '\n')
          IMAGE="$ECR_REGISTRY_CLEAN/$ECR_REPOSITORY_CLEAN:$IMAGE_TAG"
          echo "Building image: $IMAGE"
          
          docker buildx build --platform linux/amd64 -t "$IMAGE" --push .

          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"



  Continuous-Deployment:
      needs: Continuous-Integration
      runs-on: self-hosted

      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        
        - name: Run Docker Image to serve users
          run: |
            IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:latest"
            CONTAINER_NAME="latest"  # <-- Replace this with a real name like "deepfake-api" or "ml-backend"
            echo "Running Docker image: $IMAGE"

            # Stop and remove any existing container with the same name
            docker rm -f "$CONTAINER_NAME" 2>/dev/null || true

            docker run -d \
              --name "$CONTAINER_NAME" \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
              -e MONGODB_URL="${{ secrets.MONGODB_URL }}" \
              -p 8080:8080 \
              "$IMAGE"